<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hinux的博客</title>
  
  <subtitle>xdq</subtitle>
  <link href="/hinux.github.io/atom.xml" rel="self"/>
  
  <link href="https://xudaqian1.github.io/"/>
  <updated>2020-12-06T08:01:07.204Z</updated>
  <id>https://xudaqian1.github.io/</id>
  
  <author>
    <name>Hinux</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于docker构建prometheus监控系统</title>
    <link href="https://xudaqian1.github.io/2020/12/06/%E5%9F%BA%E4%BA%8Edocker%E6%9E%84%E5%BB%BAprometheus%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xudaqian1.github.io/2020/12/06/%E5%9F%BA%E4%BA%8Edocker%E6%9E%84%E5%BB%BAprometheus%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-12-06T08:00:25.000Z</published>
    <updated>2020-12-06T08:01:07.204Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="docker" scheme="https://xudaqian1.github.io/tags/docker/"/>
    
      <category term="运维" scheme="https://xudaqian1.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>code 规范</title>
    <link href="https://xudaqian1.github.io/2020/07/25/code-%E8%A7%84%E8%8C%83/"/>
    <id>https://xudaqian1.github.io/2020/07/25/code-%E8%A7%84%E8%8C%83/</id>
    <published>2020-07-25T10:26:57.000Z</published>
    <updated>2020-07-25T10:54:34.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Typescript项目代码规范（转载）"><a href="#Typescript项目代码规范（转载）" class="headerlink" title="Typescript项目代码规范（转载）"></a>Typescript项目代码规范（转载）</h2><h3 id="1-项目名称"><a href="#1-项目名称" class="headerlink" title="1. 项目名称"></a>1. 项目名称</h3><p>采用全部小写, 下划线拼接</p><blockquote><p>task_extension</p></blockquote><h3 id="2-文件夹名、文件名命名规范"><a href="#2-文件夹名、文件名命名规范" class="headerlink" title="2. 文件夹名、文件名命名规范"></a>2. 文件夹名、文件名命名规范</h3><p>采用首字母大写驼峰命名</p><blockquote><p>Service/TaskService;  Proxy/TaskProxy</p></blockquote><h3 id="3-脚本内"><a href="#3-脚本内" class="headerlink" title="3. 脚本内"></a>3. 脚本内</h3><ol><li>函数命名: 采用首字母小写驼峰命名，必须完整描述作用，<strong>动词</strong> 开头</li></ol><blockquote><p>getTasksList openExplorer load/unloadExtendsion</p></blockquote><ol start="2"><li><p>变量命名: 采用首字母小写驼峰命名，必须完整描述作用(<strong>修饰词</strong> 开头)</p></li><li><p>常量命名: 采用全大写(或者每个单词首字母大写)命名，单词 <strong>_</strong> 分割</p></li></ol><blockquote><p>TASK_TABLE_LIMIT TASK_TABLE_ORDER_ARRAY</p></blockquote><ol start="4"><li>private 属性: 首字母小写驼峰命名，属性名前加 <strong>_</strong></li></ol><blockquote><p>_selectTemplateId</p></blockquote><h3 id="4-Doc"><a href="#4-Doc" class="headerlink" title="4. Doc"></a>4. Doc</h3><ol><li>对脚本进行注释</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * 任务服务类</span><br><span class="line">  * 任务的创建、管控、生成、结束 服务类</span><br><span class="line">  * @auther aker</span><br><span class="line">  * @date 2019&#x2F;7&#x2F;27</span><br><span class="line">  *&#x2F;</span><br></pre></td></tr></table></figure><ol start="2"><li>对方法进行注释</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * 展示任务列表</span><br><span class="line">  * @param skip offset</span><br><span class="line">  * @param limit limit</span><br><span class="line">  * @param orderBy [&quot;timeUsed&quot;, &quot;createAt&quot;, &quot;diskUsed&quot;]. default createAt</span><br><span class="line">  *&#x2F;</span><br></pre></td></tr></table></figure><ol start="3"><li>接口文档(使用<a href="https://www.npmjs.com/package/gulp-apidoc" target="_blank" rel="noopener">gulp-apidoc</a>自动生产文档)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @api &#123;get&#125; &#x2F;user&#x2F;:id 请求方法 请求url</span><br><span class="line"> * @apiName GetUser api名称</span><br><span class="line"> * @apiGroup User api类别</span><br><span class="line"> *</span><br><span class="line"> * @apiParam &#123;Number&#125; id Users unique ID. 参数(Number类型)</span><br><span class="line"> *</span><br><span class="line"> * @apiSuccess &#123;String&#125; firstname Firstname of the User. 成功后返回数据内容firstname</span><br><span class="line"> * @apiSuccess &#123;String&#125; lastname  Lastname of the User. 成功后返回数据内容lastname</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><h2 id="git规范（转载）"><a href="#git规范（转载）" class="headerlink" title="git规范（转载）"></a>git规范（转载）</h2><h3 id="1-git-commit-提交规范"><a href="#1-git-commit-提交规范" class="headerlink" title="1. git commit 提交规范"></a>1. git commit 提交规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式： type(scope): subject</span><br></pre></td></tr></table></figure><ol><li>type(必须)：commit的类别，只允许使用下面几个标识<ul><li>feat: 新功能</li><li>fix: 修复bug</li><li>docs: 文档改变</li><li>style: 代码格式改变</li><li>refactor: 某个已有功能重构</li><li>perf: 性能优化</li><li>test: 增加测试</li><li>build: 改变build工具，如grunt换成了npm </li><li>revert: 撤销上一次的commit</li><li>chore: 构建过程或辅助工具的变动</li></ul></li><li>socpe(可选)：用于说明commit影响的范围，比如数据层、控制层、视图层等等</li><li>subject(必须): commit的间断描述，不超过50个字符  </li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Typescript项目代码规范（转载）&quot;&gt;&lt;a href=&quot;#Typescript项目代码规范（转载）&quot; class=&quot;headerlink&quot; title=&quot;Typescript项目代码规范（转载）&quot;&gt;&lt;/a&gt;Typescript项目代码规范（转载）&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="杂记" scheme="https://xudaqian1.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="基础" scheme="https://xudaqian1.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>websocket构建webshell</title>
    <link href="https://xudaqian1.github.io/2020/06/16/websocket%E6%9E%84%E5%BB%BAwebshell/"/>
    <id>https://xudaqian1.github.io/2020/06/16/websocket%E6%9E%84%E5%BB%BAwebshell/</id>
    <published>2020-06-16T15:46:47.000Z</published>
    <updated>2020-07-27T14:14:35.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端-vue-websocket-xterm"><a href="#前端-vue-websocket-xterm" class="headerlink" title="前端(vue,websocket,xterm)"></a>前端(vue,websocket,xterm)</h1><h2 id="1-xterm"><a href="#1-xterm" class="headerlink" title="1. xterm"></a>1. <a href="https://github.com/xtermjs/xterm.js" target="_blank" rel="noopener">xterm</a></h2><p>xterm是使用typescript写的一个前端库，可以将终端的数据在网页上显示，完整的webssh还需要后端配合。</p><h2 id="2-插件"><a href="#2-插件" class="headerlink" title="2. 插件"></a>2. 插件</h2><p>FitAddon: 用来控制前端终端窗口自适应当前窗口大小。<br><br>AttachAddon: 参数为weboskcet客户端实例，可以自动实现将前端的键盘输入数据发送给后端。</p><h2 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3. 注意点"></a>3. 注意点</h2><p>在进行终端窗口初始化和当前窗口大小改变时需要将当前web窗口的row,col传递给后端，从而规定终端输入数据的行数和列数，保证数据的正常显示。</p><h2 id="4-具体代码如下："><a href="#4-具体代码如下：" class="headerlink" title="4. 具体代码如下："></a>4. 具体代码如下：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang&#x3D;&quot;pug&quot;&gt;</span><br><span class="line">    #terminal</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; Terminal &#125; from &#39;xterm&#39;</span><br><span class="line">import &#123; FitAddon &#125; from &#39;xterm-addon-fit&#39;</span><br><span class="line">import &#123; AttachAddon &#125; from &#39;xterm-addon-attach&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Console&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      term: null,</span><br><span class="line">      terminalSocket: null,</span><br><span class="line">      FitAddon: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    runRealTerminal () &#123;</span><br><span class="line">      console.log(&#39;webSocket is finished&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    errorRealTerminal () &#123;</span><br><span class="line">      console.log(&#39;error&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    closeRealTerminal () &#123;</span><br><span class="line">      console.log(&#39;close&#39;)</span><br><span class="line">      window.close()</span><br><span class="line">    &#125;,</span><br><span class="line">    recvRealTerminal (evt) &#123;</span><br><span class="line">      this.term.write(evt.data)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy () &#123;</span><br><span class="line">      this.terminalSocket.close()</span><br><span class="line">      this.term.dispose()</span><br><span class="line">    &#125;,</span><br><span class="line">    resizeScreen () &#123;</span><br><span class="line">      if (window.changeSize) clearTimeout(window.changeSize)</span><br><span class="line">      window.changeSize &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        this.fitAddon.fit()</span><br><span class="line">        this.terminalSocket.send(JSON.stringify(&#123; type: &#39;resize&#39;, size: &#123; cols: this.term.cols, rows: this.term.rows &#125; &#125;))</span><br><span class="line">      &#125;, 500)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    let terminalContainer &#x3D; document.getElementById(&#39;terminal&#39;)</span><br><span class="line">    this.term &#x3D; new Terminal(&#123; rows: 40 &#125;)</span><br><span class="line">    this.fitAddon &#x3D; new FitAddon()</span><br><span class="line"></span><br><span class="line">    this.term.loadAddon(this.fitAddon)</span><br><span class="line">    this.term.open(terminalContainer)</span><br><span class="line">    this.term.focus()</span><br><span class="line">    this.fitAddon.fit()</span><br><span class="line">    &#x2F;&#x2F; open websocket</span><br><span class="line">    const serverId &#x3D; this.$route.query.serverId</span><br><span class="line">    const serviceId &#x3D; this.$route.query.serviceId</span><br><span class="line">    let wsUrl &#x3D; location.protocol &#x3D;&#x3D;&#x3D; &#39;https:&#39; ? &#39;wss:&#x2F;&#x2F;&#39; : &#39;ws:&#x2F;&#x2F;&#39;</span><br><span class="line">    this.terminalSocket &#x3D; new WebSocket(wsUrl)</span><br><span class="line">    this.terminalSocket.onopen &#x3D; this.runRealTerminal</span><br><span class="line">    this.terminalSocket.onclose &#x3D; this.closeRealTerminal</span><br><span class="line">    this.terminalSocket.onerror &#x3D; this.errorRealTerminal</span><br><span class="line">    this.terminalSocket.onmessage &#x3D; this.recvRealTerminal</span><br><span class="line">    this.term._initialized &#x3D; true</span><br><span class="line">    window.onresize &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      this.resizeScreen()</span><br><span class="line">    &#125;</span><br><span class="line">    this.term.onData((data) &#x3D;&gt; &#123;</span><br><span class="line">      this.terminalSocket.send(JSON.stringify(&#123; type: &#39;terminal_write&#39;, text: data &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(&#39;mounted is going on&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="后端-ws-ssh2"><a href="#后端-ws-ssh2" class="headerlink" title="后端(ws,ssh2)"></a>后端(ws,ssh2)</h1><h2 id="1-ws"><a href="#1-ws" class="headerlink" title="1.ws"></a>1.<a href="https://github.com/websockets/ws" target="_blank" rel="noopener">ws</a></h2><p>nodejs建立ws服务端库，使用简单方便，可以根据需要再建立websocket服务端时对连接对客户端使用verifyClient进行检查连接是否符合要求</p><h2 id="2-ssh2-https-github-com-mscdex-ssh2"><a href="#2-ssh2-https-github-com-mscdex-ssh2" class="headerlink" title="2. (ssh2)[https://github.com/mscdex/ssh2]"></a>2. (ssh2)[<a href="https://github.com/mscdex/ssh2]" target="_blank" rel="noopener">https://github.com/mscdex/ssh2]</a></h2><p>使用nodejs开发的使用ssh协议来操作linux终端的模块</p><h3 id="3-具体代码如下"><a href="#3-具体代码如下" class="headerlink" title="3. 具体代码如下"></a>3. 具体代码如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">import WebSocket from &#39;ws&#39;</span><br><span class="line">import http from &#39;http&#39;</span><br><span class="line">import &#123; Client, ClientChannel &#125; from &#39;ssh2&#39;</span><br><span class="line">import url from &#39;url&#39;</span><br><span class="line">import ServerDao from &#39;@&#x2F;mongo&#x2F;dao&#x2F;server&#39;</span><br><span class="line">import ServiceDao from &#39;@&#x2F;mongo&#x2F;dao&#x2F;service&#39;</span><br><span class="line">import &#123; callAsync &#125; from &#39;@&#x2F;lib&#x2F;awaitCall&#39;</span><br><span class="line"></span><br><span class="line">class WsService &#123;</span><br><span class="line">  public static async ssh(serverId: string, serviceId: string, rows: number, cols: number, ws: WebSocket) &#123;</span><br><span class="line">    const accountInfo: any &#x3D; &#123;&#125;</span><br><span class="line">    let deployDir &#x3D; &#39;&#39;</span><br><span class="line">    if (serviceId) &#123;</span><br><span class="line">      const [err, service] &#x3D; await callAsync(ServiceDao.findById(serviceId))</span><br><span class="line">      if (err || !service) &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        ws.close()</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      accountInfo.host &#x3D; service.serverId.address</span><br><span class="line">      accountInfo.username &#x3D; service.serverId.username</span><br><span class="line">      accountInfo.password &#x3D; service.serverId.password</span><br><span class="line">      deployDir &#x3D; service.deployDir</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      const [err1, server] &#x3D; await callAsync(ServerDao.findById(serverId))</span><br><span class="line">      if (err1 || !server) &#123;</span><br><span class="line">        console.log(err1)</span><br><span class="line">        ws.close()</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      accountInfo.host &#x3D; server.address</span><br><span class="line">      accountInfo.username &#x3D; server.username</span><br><span class="line">      accountInfo.password &#x3D; server.password</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const client &#x3D; new Client()</span><br><span class="line">    client.connect(accountInfo)</span><br><span class="line">    client.on(&#39;ready&#39;, function () &#123;</span><br><span class="line">      client.shell(&#123;</span><br><span class="line">        cols:cols,</span><br><span class="line">        rows:rows,</span><br><span class="line">      &#125;,(err: Error, stream: ClientChannel) &#x3D;&gt; &#123;</span><br><span class="line">        if (deployDir) &#123;</span><br><span class="line">          stream.write(&#96;cd $&#123;deployDir&#125; &amp;&amp; clear \n&#96;)</span><br><span class="line">        &#125;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">          client.end()</span><br><span class="line">        &#125;</span><br><span class="line">        stream.on(&#39;data&#39;, (data: any) &#x3D;&gt; &#123;</span><br><span class="line">          const a&#x3D; data.toString(&#39;utf-8&#39;)</span><br><span class="line">          ws.send(a)</span><br><span class="line">        &#125;)</span><br><span class="line">        stream.on(&#39;close&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">          client.end()</span><br><span class="line">        &#125;)</span><br><span class="line">        stream.on(&#39;exit&#39;, (code) &#x3D;&gt; &#123;</span><br><span class="line">          console.log(&#39;exit coed:&#39;, code)</span><br><span class="line">          client.end()</span><br><span class="line">        &#125;)</span><br><span class="line">        ws.on(&#39;message&#39;, (message: WebSocket.Data) &#x3D;&gt; &#123;</span><br><span class="line">          const cmdObj &#x3D; JSON.parse(message as string)</span><br><span class="line">          if(cmdObj.type &#x3D;&#x3D; &#39;terminal_write&#39;)&#123;</span><br><span class="line">            stream.write(cmdObj.text)</span><br><span class="line"></span><br><span class="line">          &#125;else if(cmdObj.type &#x3D;&#x3D; &#39;resize&#39;)&#123;</span><br><span class="line">            stream.setWindow(cmdObj.size.rows,cmdObj.size.cols,null,null)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    client.on(&#39;end&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;end:连接关闭&quot;)</span><br><span class="line">      ws.close()</span><br><span class="line">    &#125;)</span><br><span class="line">    client.on(&#39;close&#39;, (error) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;close&#39;, error)</span><br><span class="line">      ws.close()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default class Message &#123;</span><br><span class="line">  public static wsObject: any &#x3D; &#123;&#125;</span><br><span class="line">  connect(ws: WebSocket, req: http.IncomingMessage) &#123;</span><br><span class="line">    const urlParse &#x3D; url.parse(req.url, true)</span><br><span class="line">    const path &#x3D; urlParse.pathname.split(&#39;&#x2F;&#39;)[1]</span><br><span class="line">    const timestamp &#x3D; String(urlParse.query.timestamp)</span><br><span class="line">    console.log(path)</span><br><span class="line">    switch (path) &#123;</span><br><span class="line">      case &#39;terminal&#39;:</span><br><span class="line">        const serverId &#x3D; urlParse.query.serverId</span><br><span class="line">        const serviceId &#x3D; urlParse.query.serviceId</span><br><span class="line">        const rows &#x3D; parseInt(urlParse.query.rows as string)</span><br><span class="line">        const cols &#x3D; parseInt(urlParse.query.cols as string)</span><br><span class="line">        if (serverId) &#123;</span><br><span class="line">          WsService.ssh(String(serverId), serviceId? String(serviceId): &#39;&#39;, rows, cols, ws)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(&#39;serverId错误&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        console.log(&#39;未匹配到正确路由&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    ws.on(&#39;close&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">      if(timestamp) delete Message.wsObject[timestamp]</span><br><span class="line">    &#125;)</span><br><span class="line">    ws.on(&#39;error&#39;, (err) &#x3D;&gt; &#123;</span><br><span class="line">      if(timestamp) delete Message.wsObject[timestamp]</span><br><span class="line">      console.log(&#39;websocket_error&#39;, err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端-vue-websocket-xterm&quot;&gt;&lt;a href=&quot;#前端-vue-websocket-xterm&quot; class=&quot;headerlink&quot; title=&quot;前端(vue,websocket,xterm)&quot;&gt;&lt;/a&gt;前端(vue,websocket,xt
      
    
    </summary>
    
    
    
      <category term="nodejs" scheme="https://xudaqian1.github.io/tags/nodejs/"/>
    
      <category term="websocket" scheme="https://xudaqian1.github.io/tags/websocket/"/>
    
      <category term="xterm" scheme="https://xudaqian1.github.io/tags/xterm/"/>
    
      <category term="ssh2" scheme="https://xudaqian1.github.io/tags/ssh2/"/>
    
  </entry>
  
  <entry>
    <title>docker构建镜像</title>
    <link href="https://xudaqian1.github.io/2020/05/18/docker%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/"/>
    <id>https://xudaqian1.github.io/2020/05/18/docker%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/</id>
    <published>2020-05-18T14:55:23.000Z</published>
    <updated>2020-06-15T14:23:37.438Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md" target="_blank" rel="noopener">参考、学习地址</a></p><h1 id="docker基础"><a href="#docker基础" class="headerlink" title="docker基础"></a>docker基础</h1><ol><li>镜像（image）：一个容器（包括各种服务和环境）的模版<ul><li>镜像相关命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker images :列出本地所有镜像</span><br><span class="line">docker images -aq:列出所有镜像，包括中间层镜像的id(a:列出中间层，q:列出镜像id)</span><br><span class="line">docker search  -s 30 imageName:所有镜像仓库中start大于30的镜像</span><br><span class="line">docker pull imageName: 下载镜像未加版本号默认最新版本</span><br><span class="line">docker rmi -f imageId: 删除某个镜像</span><br><span class="line">docker rmi -f imageName1:Tag1 mageName2:Tag2: 删除多个镜像</span><br><span class="line">docker rmi -f $(docker images -qa): 删除所有镜像</span><br></pre></td></tr></table></figure></li></ul></li><li>容器（container）：一个镜像的实例，通过镜像来进行创建，创建好的容器中有镜像的所有环境和服务<ul><li>容器相关命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -it(-d:后台运行) dockername: 新建容器并分配交互伪终端</span><br><span class="line">dcoker ps(-n ,-l) :列出所有正在运行的容器</span><br><span class="line">docker start 容器ID: 启动容器</span><br><span class="line">docker restart 容器ID: 重启容器</span><br><span class="line">docker stop&#x2F;kill 容器ID: 停止容器</span><br><span class="line">docker rm（-f：强制删除）: 删除已经停止的容器</span><br><span class="line">docker logs 容器ID：查看容器日志</span><br><span class="line">docker top 容器ID：查看容器进程</span><br><span class="line">docker exec(-it) 容器ID:在容器内执行某些命令</span><br><span class="line">docker cp 容器ID：dockerPath remotePath: 将docker中的文件拷贝到宿主机中的相应目录</span><br></pre></td></tr></table></figure></li></ul></li><li>仓库（registry）：集中存放镜像到场所，分为私有和共有仓库</li><li>DockerFile构建镜像指令详解<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM：当前构建的镜像是基于哪一个镜像</span><br><span class="line">MAINTAINER：镜像维护者的相关信息</span><br><span class="line">RUN：容器构建时需要运行的命令</span><br><span class="line">EXPOSE：当前容器对外暴露的端口</span><br><span class="line">WORKDIR：在创建容器后，终端默认登录到哪一个工作目录</span><br><span class="line">ENV：在构建镜像过程中设置的环境变量</span><br><span class="line">ADD：将宿主机目录下的文件拷贝进镜像并且会自动处理URL和解压tar压缩包</span><br><span class="line">COPY：拷贝本地文件到构建的镜像中</span><br><span class="line">VOLUME：容器数据卷，用于数据保存和持久化工作</span><br><span class="line">CMD：指定一个容器启动时要运行的命令，过个CMD命令只有最后一个可以生效</span><br><span class="line">ENTRYPOINT：指定一个容器启动时要运行的命令，不会有失效的问题</span><br><span class="line">ONBUILD：当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后父镜像的onbuild被触发</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考、学习地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;docker基础
      
    
    </summary>
    
    
      <category term="系统运维" scheme="https://xudaqian1.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="docker" scheme="https://xudaqian1.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hexo-next踩坑篇</title>
    <link href="https://xudaqian1.github.io/2020/05/16/hexo-next%E8%B8%A9%E5%9D%91%E7%AF%87/"/>
    <id>https://xudaqian1.github.io/2020/05/16/hexo-next%E8%B8%A9%E5%9D%91%E7%AF%87/</id>
    <published>2020-05-16T10:21:41.000Z</published>
    <updated>2020-05-17T08:21:37.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改文章首页显示内容"><a href="#修改文章首页显示内容" class="headerlink" title="修改文章首页显示内容"></a>修改文章首页显示内容</h1><ol><li>修改themes/next目录下_config.yml,将auto_excerpt中的false改为true<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">enable: true</span><br><span class="line">length: 150</span><br></pre></td></tr></table></figure></li><li>重启hexo服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h1></li><li>修改themes/next目录下_config.yml,将avatar: /images/avatar.gif取消注释</li><li>将头像图片（avatar.gif）放到public/images/目录下</li><li>重启hexo服务<h1 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h1></li><li>修改根目录下_config.yml.将language: en 改为language: zh-Hans</li><li>重启服务<h1 id="增加文章内容统计"><a href="#增加文章内容统计" class="headerlink" title="增加文章内容统计"></a>增加文章内容统计</h1></li><li>修改themes/next目录下_config.yml,将post_wordcount中相关的统计功能开启<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">item_text: true</span><br><span class="line">wordcount: true</span><br><span class="line">min2read: true</span><br><span class="line">totalcount: true</span><br><span class="line">separated_meta: true</span><br></pre></td></tr></table></figure><h1 id="增加blog阅读量统计"><a href="#增加blog阅读量统计" class="headerlink" title="增加blog阅读量统计"></a>增加blog阅读量统计</h1></li><li>修改themes/next目录下_config.yml，找到busuanzi_count，把enable设置为true<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Show PV&#x2F;UV of the website&#x2F;page with busuanzi.</span><br><span class="line"># Get more information on http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi&#x2F;</span><br><span class="line">busuanzi_count:</span><br><span class="line"># count values only if the other configs are false</span><br><span class="line">enable: true</span><br><span class="line"># custom uv span for the whole site</span><br><span class="line">site_uv: true</span><br><span class="line">site_uv_header: &lt;i class&#x3D;&quot;fa fa-user&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">site_uv_footer:</span><br><span class="line"># custom pv span for the whole site</span><br><span class="line">site_pv: true</span><br><span class="line">site_pv_header: &lt;i class&#x3D;&quot;fa fa-eye&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">site_pv_footer:</span><br><span class="line"># custom pv span for one page only</span><br><span class="line">page_pv: true</span><br><span class="line">page_pv_header: &lt;i class&#x3D;&quot;fa fa-file-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">page_pv_footer:</span><br></pre></td></tr></table></figure></li><li>修改themes\next\layout_third-partials\analytics\busuanzi-counter.swig文件中的连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;busuanzi-count&quot;&gt;</span><br><span class="line">&lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li>重启服务<h1 id="修改网站域名"><a href="#修改网站域名" class="headerlink" title="修改网站域名"></a>修改网站域名</h1><h1 id="未完待续。。。。"><a href="#未完待续。。。。" class="headerlink" title="未完待续。。。。"></a>未完待续。。。。</h1></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;修改文章首页显示内容&quot;&gt;&lt;a href=&quot;#修改文章首页显示内容&quot; class=&quot;headerlink&quot; title=&quot;修改文章首页显示内容&quot;&gt;&lt;/a&gt;修改文章首页显示内容&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;修改themes/next目录下_config.yml,将aut
      
    
    </summary>
    
    
      <category term="工具" scheme="https://xudaqian1.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="杂记" scheme="https://xudaqian1.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>nginx学习</title>
    <link href="https://xudaqian1.github.io/2020/05/16/nginx%E5%AD%A6%E4%B9%A0/"/>
    <id>https://xudaqian1.github.io/2020/05/16/nginx%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-05-16T08:12:24.000Z</published>
    <updated>2020-06-15T15:21:57.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用docker-compose部署nginx"><a href="#使用docker-compose部署nginx" class="headerlink" title="使用docker-compose部署nginx"></a>使用docker-compose部署nginx</h1><ul><li>新建docker-compose.yml配置文件,配置内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;2.0&#39;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    restart: always</span><br><span class="line">    image: nginx:1.11.6-alpine</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">      - 80:80</span><br><span class="line">      - 443:443</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class="line">      - .&#x2F;log:&#x2F;var&#x2F;log&#x2F;nginx</span><br><span class="line">      - .&#x2F;www:&#x2F;var&#x2F;www</span><br><span class="line">      - &#x2F;etc&#x2F;letsencrypt:&#x2F;etc&#x2F;letsencrypt</span><br><span class="line">参数说明如下：</span><br><span class="line">version: 版本号</span><br><span class="line">services: 定义doucker的容器</span><br><span class="line">nginx: 容器的名称</span><br><span class="line">image: 容器中使用的镜像</span><br><span class="line">ports: 容器运行时需要暴露的端口号（8080:80，容器内为80，容器外对应的是8080）</span><br><span class="line">volumes: 表示数据卷，表示将容器外的目录映射到容器内（容器外：容器内）</span><br></pre></td></tr></table></figure></li><li>运行构建镜像</li></ul><h1 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h1><p>  反向代理： 用户访问服务器时只能访问代理服务器，代理服务器对外屏蔽了服务器信息，并且可以规定以某种规则分发给不同的服务器。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  server &#123;</span><br><span class="line">      listen              80;</span><br><span class="line">      server_name         192.168.17.129;</span><br><span class="line">  </span><br><span class="line">      location &#x2F; &#123;</span><br><span class="line">          proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">运行nginx之后，访问192.168.17.129:80即可访问本地127.0.0.1:8080服务</span><br></pre></td></tr></table></figure><h1 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h1><p>  负载均衡：当访问量过大时通过多台服务器去减轻服务器的压力</p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">一、轮询（将对服务对请求平均分配到不同到服务器中）</span><br><span class="line">  upstream  dalaoyang-server &#123;</span><br><span class="line">      server    localhost:10001;</span><br><span class="line">      server    localhost:10002;</span><br><span class="line">  &#125;</span><br><span class="line">二、权重（按照1&#x2F;3和2&#x2F;3的概率分配到不同到服务器中）</span><br><span class="line">  upstream  dalaoyang-server &#123;</span><br><span class="line">     server    localhost:10001 weight&#x3D;1;</span><br><span class="line">     server    localhost:10002 weight&#x3D;2;</span><br><span class="line">  &#125;</span><br><span class="line">三、iphash(每个请求都根据访问ip的hash结果分配，经过这样的处理，每个访客固定访问一个后端服务,可以配合权重使用)</span><br><span class="line"> upstream  dalaoyang-server &#123;</span><br><span class="line">     ip_hash; </span><br><span class="line">     server    localhost:10001 weight&#x3D;1;</span><br><span class="line">     server    localhost:10002 weight&#x3D;2;</span><br><span class="line">  &#125;</span><br><span class="line">四、最少连接（将请求分配到连接数最少的服务上conns&#x2F;weight）</span><br><span class="line">  upstream  dalaoyang-server &#123;</span><br><span class="line">     least_conn;</span><br><span class="line">     server    localhost:10001 weight&#x3D;1;</span><br><span class="line">     server    localhost:10002 weight&#x3D;2;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="配置动静分离"><a href="#配置动静分离" class="headerlink" title="配置动静分离"></a>配置动静分离</h1><p>  动静分离：将web服务中到动态资源和静态资源进行分离</p><h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen       10000;</span><br><span class="line">     server_name  localhost;</span><br><span class="line">    </span><br><span class="line">    #拦截后台请求</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">      proxy_pass http:&#x2F;&#x2F;localhost:8888;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x2F;www&#x2F; &#123;</span><br><span class="line">      root &#x2F;static&#x2F;www&#x2F; ;</span><br><span class="line">      index index.html indexhtm;</span><br><span class="line">     &#125;</span><br><span class="line">     location &#x2F;image&#x2F; &#123;</span><br><span class="line">      root &#x2F;static&#x2F;image&#x2F; ;</span><br><span class="line">      autoindex on;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用docker-compose部署nginx&quot;&gt;&lt;a href=&quot;#使用docker-compose部署nginx&quot; class=&quot;headerlink&quot; title=&quot;使用docker-compose部署nginx&quot;&gt;&lt;/a&gt;使用docker-compose部
      
    
    </summary>
    
    
      <category term="系统运维" scheme="https://xudaqian1.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="nginx" scheme="https://xudaqian1.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>hexo 快速搭建博客</title>
    <link href="https://xudaqian1.github.io/2020/05/12/hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xudaqian1.github.io/2020/05/12/hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-05-12T13:18:32.000Z</published>
    <updated>2020-05-17T08:11:51.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装node，git环境"><a href="#安装node，git环境" class="headerlink" title="安装node，git环境"></a>安装node，git环境</h2><ol><li><p>安装node环境(mac)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></li><li><p>安装git环境(mac)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><ol><li><p>安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>初始化hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;文件夹名称&gt;</span><br><span class="line">cd &lt;文件夹名称&gt;</span><br><span class="line">npm install</span><br><span class="line">注：</span><br><span class="line">_config.yml:配置文件</span><br><span class="line">source: 博客文档（markdown文档）</span><br><span class="line">themes: 博客主题（默认问ladespace）</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="/hinux.github.io/2020/05/12/hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1.png" alt="效果图"></p></li><li><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server </span><br><span class="line">访问 http:&#x2F;&#x2F;localhost:4000即可</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/hinux.github.io/2020/05/12/hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/2.png" alt="效果图"></p></li></ol><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><ol><li>创建github账号（百度即可，不做过多叙述）</li><li>创建仓库:仓库名称.github.io(例如:hinux.github.io)</li><li>进入仓库创建的仓库,点击setting,找到GitHub Pages模块</li><li>选择一个页面主题</li><li>访问<a href="https://username.github.io访问博客网站" target="_blank" rel="noopener">https://username.github.io访问博客网站</a></li><li>将本地hexo博客推送至github<ul><li>在本地安装hexo-deployer-git插件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>在github中添加SSH key（推送代码认证 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot; #产生key</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>将在～/.ssh目录下产生的密钥添加到github中</li><li>测试是否认证成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com </span><br><span class="line">Warning: Permanently added the RSA host key for IP address &#39;13.250.177.223&#39; to the list of known hosts.</span><br><span class="line">Hi xudaqian1! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></li></ul></li><li>修改_config.yml(站点目录)末尾文件内容 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;&#x2F;&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li>推送到GithubPages   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xudaqiandeMacBook-Pro:myBlog xudaqian$ hexo g</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  7 files generated in 868 ms</span><br><span class="line">xudaqiandeMacBook-Pro:myBlog xudaqian$ hexo d</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">[master c6babc0] Site updated: 2020-05-16 14:49:32</span><br><span class="line">remote: Resolving deltas: 100% (6&#x2F;6), completed with 4 local objects.</span><br><span class="line">To https:&#x2F;&#x2F;github.com&#x2F;xudaqian1&#x2F;hinux.github.io.git</span><br><span class="line">  6974c90..c6babc0  HEAD -&gt; master</span><br><span class="line">Branch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;https:&#x2F;&#x2F;github.com&#x2F;xudaqian1&#x2F;hinux.github.io.git&#39;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure></li><li>访问博客</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装node，git环境&quot;&gt;&lt;a href=&quot;#安装node，git环境&quot; class=&quot;headerlink&quot; title=&quot;安装node，git环境&quot;&gt;&lt;/a&gt;安装node，git环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装node环境(mac)&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
    
      <category term="工具" scheme="https://xudaqian1.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="杂记" scheme="https://xudaqian1.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
